{"version":3,"file":"static/js/908.f93255f9.chunk.js","mappings":"sJAYe,SAASA,EAAYC,GAEhC,OACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAeC,GAAIH,EAAMI,UAAUC,SAAEL,EAAMM,OAEjE,C,8CCde,SAASC,EAASP,GAG7B,OACIQ,EAAAA,EAAAA,MAAA,OAAKN,UAAU,oCAAmCG,SAAA,EAC9CJ,EAAAA,EAAAA,KAAA,OACAQ,IAAKT,EAAMU,OACXC,IAAKX,EAAMY,QAEXX,EAAAA,EAAAA,KAAA,QAAAI,SAAOL,EAAMY,SAGzB,C,aCXe,SAASC,EAAUb,GAG9B,OACIQ,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACIJ,EAAAA,EAAAA,KAACF,EAAAA,EAAW,CAACO,MAAON,EAAMc,cAC1Bb,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBG,UAE7BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAW,mCAAkCG,SAC7CL,EAAMe,KAAMf,EAAMe,KAAKC,KAAI,CAACC,EAAOC,KAChCjB,EAAAA,EAAAA,KAACM,EAAQ,CAELK,KAAMK,EAAKL,KACXF,OAAQO,EAAKP,OACbS,gBAAgB,IAHXD,MAILjB,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,UAQ5B,C,yFCJe,SAASC,EAAcrB,GAElC,MAAM,KAACsB,EAAI,QAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAC7BC,GAAaC,EAAAA,EAAAA,MAEbC,EAAQC,KACVC,EAAAA,EAAAA,kBAAgB,KACZJ,EAAWG,EAAK,GAClB,EAGN,OAEIrB,EAAAA,EAAAA,MAAA,OAAKN,UAAU,kCAAiCG,SAAA,EAChCJ,EAAAA,EAAAA,KAACF,EAAAA,EAAW,CAACK,UAAU,gBAAgBE,MAAOgB,EAAM,YAAWS,EAAAA,EAAAA,GAAwBT,EAAKU,SAAS,mBACrG/B,EAAAA,EAAAA,KAAA,UAAQC,UAAU,iBAAiB+B,QAASV,EAAS,aAAW,cAChEf,EAAAA,EAAAA,MAAA,QAAMN,UAAU,iBAAgBG,SAAA,EAC5BJ,EAAAA,EAAAA,KAAA,UAAQgC,QAASA,IAAML,EAAK,KAAO1B,UAAW,cAAmC,SAAtBF,EAAMkC,YAAwB,SAAW,IAAK7B,SAAC,UAC1GJ,EAAAA,EAAAA,KAAA,UAAQgC,QAASA,IAAML,EAAK,YAAa1B,UAAW,cAAmC,YAAtBF,EAAMkC,YAA2B,SAAW,IAAK7B,SAAE,gBAGpIJ,EAAAA,EAAAA,KAAA,QAAME,GAAG,4BAKrB,C,8FC9BO,MAAMgC,EAAWC,eAAOP,GAAiD,IAA3CQ,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAKH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAOI,EAAKJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAElEK,GAAWC,EAAAA,EAAAA,IAAIC,EAAAA,EAAUhB,GACzBQ,GAASI,IACTE,GAAWG,EAAAA,EAAAA,GACPH,GACAI,EAAAA,EAAAA,IAAaV,IACbW,EAAAA,EAAAA,IAAQP,IACRQ,EAAAA,EAAAA,IAAaP,KAGrB,IACI,MAAMQ,QAAiBC,EAAAA,EAAAA,IAAIR,GAC3B,GAAGO,EAASE,SAAS,CACjBC,QAAQC,IAAI,gCAAiCJ,EAASK,OAEtD,OADaL,EAASK,KAE1B,CAEMF,QAAQC,IAAI,iCACtB,CAAC,MAAME,GACHH,QAAQG,MAAM,sCAAuCA,EACzD,CAEA,OAAO,IACX,E,sBClCe,SAASC,IAEpB,MAAOC,EAASC,IAAaC,EAAAA,EAAAA,UAAS,IAyBtC,OAvBAC,EAAAA,EAAAA,YAAU,KACkBzB,WAAa,IAAD0B,EAC5B,MAAMC,EAAc,UAA0B,QAA1BD,EAAUE,EAAAA,EAAKC,mBAAW,IAAAH,OAAA,EAAhBA,EAAkBI,aAC1CC,QAAgBhC,EAAS4B,GAC/BV,QAAQC,IAAI,kBAAmBa,GAC/BR,EAAUQ,EAAQ,EAEtBC,GAGCC,SAAS/D,MAAQ,eACV+D,SAASC,KAAKC,MAAMC,gBAAkB,OAAOC,KAE7CJ,SAASC,KAAKC,MAAMG,mBAAqB,aACzCL,SAASC,KAAKC,MAAMI,eAAiB,QACrCN,SAASC,KAAKC,MAAMK,iBAAmB,WACvCP,SAASC,KAAKC,MAAMM,qBAAuB,SAC3CR,SAASC,KAAKC,MAAMO,OAAQ,IAC5BT,SAASC,KAAKC,MAAMQ,QAAS,GAAG,GAE5C,KAIAvE,EAAAA,EAAAA,MAAA,OAAKN,UAAW,UAASG,SAAA,EACrBJ,EAAAA,EAAAA,KAACoB,EAAAA,EAAa,CAACa,YAAY,aAC3BjC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBG,UAC3BJ,EAAAA,EAAAA,KAAA,WAASE,GAAG,cAAaE,UACrBJ,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CAAEC,WAAY,oBAAoBkE,WAAW,aAAajE,KAAM2C,UAQ9F,C,iCClDA,MAAM3B,EAA2BC,GAAUA,EAAMiD,MAAM,KAAK,GAAGC,OAAO,GAAGC,cAAgBnD,EAAMiD,MAAM,KAAK,GAAGG,MAAM,E","sources":["components/base-components/ScreenTitle/ScreenTitle.js","components/CardItem/CardItem.js","components/CardTable/CardTable.js","components/base-components/NavigationBar/NavigationBar.js","components/SearchDB.js","components/Profile/Profile.js","components/utils.js"],"sourcesContent":["import \"./ScreenTitle.css\"\r\n\r\n/**\r\n * A functional component that displays a screen title.\r\n * \r\n * @param {object} props - The props object.\r\n * @param {string} props.title - The text to display as the screen title.\r\n * @param {string} props.design_id - The id to assign to the title element.\r\n * \r\n * @returns A JSX element representing the screen title.\r\n */\r\n\r\nexport default function ScreenTitle(props){\r\n    \r\n    return(\r\n        <h2 className=\"screen-title\" id={props.design_id}>{props.title}</h2>\r\n    )\r\n}","\r\nimport \"./CardItem.css\"\r\n\r\nexport default function CardItem(props){\r\n\r\n\r\n    return(\r\n        <div className=\"card-item {props.extraStyleClass}\" >\r\n            <img \r\n            src={props.avatar} \r\n            alt={props.name}\r\n            />   \r\n            <span>{props.name}</span>        \r\n        </div>\r\n    );\r\n}","import CardItem from \"../CardItem/CardItem.js\";\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\nimport \"./CardTable.css\";\r\n\r\nexport default function CardTable(props){\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <ScreenTitle title={props.tableTitle}/>\r\n            <div className='center-container'>\r\n                \r\n                <div className =\"{props.styleClass} expense-grid \">\r\n                    {props.rows? props.rows.map((item , index) => (\r\n                        <CardItem \r\n                            key={index} \r\n                            name={item.name} \r\n                            avatar={item.avatar}\r\n                            extraStyleClass=\"\" /> \r\n                        )): <></>}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n      \r\n    );\r\n}","import { useNavigate } from 'react-router-dom';\r\nimport { useContext, startTransition } from 'react';\r\n\r\n\r\nimport { splitAndCapitalizeEmail } from \"../../utils\";\r\nimport ScreenTitle from \"../ScreenTitle/ScreenTitle\";\r\nimport { userContext } from \"../../../UserProvider\";\r\n\r\nimport \"./NavigationBar.css\";\r\n\r\n\r\n/**\r\n * A NavigationBar component that renders a menu with options for the \r\n * main pages of the application. The component uses the userContext \r\n * to determine if the user is signed in and if so, displays the user's \r\n * name and a log out button. The component also takes a currentPage \r\n * prop which determines which menu item is active.\r\n * \r\n * @param {object} props - An object containing the currentPage prop.\r\n * @param {string} props.currentPage - The current page of the application.\r\n * \r\n * @returns A JSX element representing the NavigationBar component.\r\n */\r\nexport default function NavigationBar(props) {\r\n\r\n    const {user, signOut} = useContext(userContext);\r\n    const navigation = useNavigate();\r\n\r\n    const goTo = (path) => {\r\n        startTransition(() => {\r\n            navigation(path);\r\n        });\r\n    }\r\n\r\n    return(\r\n\r\n        <div className=\"docked-container welcome-docker\">\r\n                        <ScreenTitle design_id=\"welcome-title\" title={user? `Welcome ${splitAndCapitalizeEmail(user.email)}`:`Welcome Guest`}/>\r\n                        <button className=\"log-out-button\" onClick={signOut} aria-label=\"Sign Out\"></button>\r\n                        <menu className=\"menu-container\">\r\n                            <button onClick={() => goTo(\"/\")}  className={`menu-item ${props.currentPage === \"home\"? \"active\" : \"\"}`}>Home</button>\r\n                            <button onClick={() => goTo(\"/profile\")} className={`menu-item ${props.currentPage === \"profile\"? \"active\" : \"\"}`} >Profile</button>\r\n                        </menu>\r\n                        \r\n            <span id=\"menu-backgroundEffect\"></span>        \r\n        </div>\r\n        \r\n\r\n    )\r\n}","\r\nimport {ref, query, orderByChild, limitToFirst, equalTo, get} from \"firebase/database\";\r\n\r\nimport database from \"./FireBase\";\r\n\r\n\r\n/**\r\n * Searches the Firebase database at the specified path, optionally filtering\r\n * by a specified field and value, and limiting the number of results.\r\n * \r\n * @param {string} path - The database path to search.\r\n * @param {string|null} field - The child key to order the results by (optional).\r\n * @param {*} value - The value to match the ordered child key against (optional).\r\n * @param {number} limit - The maximum number of results to return. Default is 1.\r\n * @returns {Promise<Object|null>} - A promise that resolves to the data retrieved\r\n *                                   from the database if it exists, or null if no\r\n *                                   data is found or an error occurs.\r\n */\r\n\r\nexport const searchDB = async (path, field = null, value = null , limit = 1) =>{\r\n    \r\n    let queryRef = ref(database, path);\r\n    if (field && value) {\r\n        queryRef = query(\r\n            queryRef, \r\n            orderByChild(field), \r\n            equalTo(value), \r\n            limitToFirst(limit)); \r\n    }\r\n\r\n    try{\r\n        const snapshot = await get(queryRef);\r\n        if(snapshot.exists()){\r\n            console.log(\"Data recieved from firebase: \", snapshot.val());\r\n            const data = snapshot.val();\r\n            return data;\r\n        }\r\n          \r\n        else{ console.log(\"No data available on database.\"); }\r\n    }catch(error){\r\n        console.error(\"Error fetching data from database: \", error);\r\n    }\r\n\r\n    return null;\r\n}","import { useState, useEffect } from \"react\";\r\n// import {ref, get} from \"firebase/database\";\t\r\n// import database from \"../FireBase\";\r\n\r\nimport NavigationBar from \"../base-components/NavigationBar/NavigationBar\";\r\nimport {auth} from \"../FireBase\";\r\nimport CardTable from \"../CardTable/CardTable\";\r\nimport {searchDB} from \"../SearchDB\";\r\nimport bg from \"../../assets/images/scrollableBackground.png\";\r\n\r\nexport default function Profile() {\r\n    \r\n    const [actors , setActors] = useState([]);\r\n\r\n    useEffect(() =>{\r\n            const fetchActors = async () => {\r\n                const refernceURL = `/users/${auth.currentUser?.uid}/actors`;\r\n                const results = await searchDB(refernceURL);\r\n                console.log(\"The results are\", results);\r\n                setActors(results);\r\n            }\r\n            fetchActors();\r\n\r\n\r\n             document.title = \"Profile Page\";\r\n                    document.body.style.backgroundImage = `url(${bg})`; ;\r\n                    \r\n                    document.body.style.backgroundPosition = \"top center\";\r\n                    document.body.style.backgroundSize = \"cover\"; // This fills the entire screen\r\n                    document.body.style.backgroundRepeat = \"repeat-y\";\r\n                    document.body.style.backgroundAttachment = \"scroll\";\r\n                    document.body.style.margin= \"0\";\r\n                    document.body.style.padding= \"0\";\r\n            \r\n    } , []);\r\n\r\n\r\n    return (\r\n        <div className =\"profile\">\r\n            <NavigationBar currentPage=\"profile\"/>\r\n            <div className=\"page-container\">\r\n                <section id=\"user-actors\">\r\n                    <CardTable  tableTitle= \"Your added Actors\" styleClass=\"card-table\" rows={actors}/>\r\n                </section>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","const splitAndCapitalizeEmail = (email) => email.split(\"@\")[0].charAt(0).toUpperCase() + email.split(\"@\")[0].slice(1);\r\n\r\nexport {splitAndCapitalizeEmail};"],"names":["ScreenTitle","props","_jsx","className","id","design_id","children","title","CardItem","_jsxs","src","avatar","alt","name","CardTable","tableTitle","rows","map","item","index","extraStyleClass","_Fragment","NavigationBar","user","signOut","useContext","userContext","navigation","useNavigate","goTo","path","startTransition","splitAndCapitalizeEmail","email","onClick","currentPage","searchDB","async","field","arguments","length","undefined","value","limit","queryRef","ref","database","query","orderByChild","equalTo","limitToFirst","snapshot","get","exists","console","log","val","error","Profile","actors","setActors","useState","useEffect","_auth$currentUser","refernceURL","auth","currentUser","uid","results","fetchActors","document","body","style","backgroundImage","bg","backgroundPosition","backgroundSize","backgroundRepeat","backgroundAttachment","margin","padding","styleClass","split","charAt","toUpperCase","slice"],"sourceRoot":""}
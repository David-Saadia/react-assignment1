{"version":3,"file":"static/js/406.f7c55dfd.chunk.js","mappings":"sJAee,SAASA,EAAUC,GAE9B,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAW,cAAcF,EAAMG,aAAaC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SAAOC,KAAMN,EAAMO,KAAMA,KAAMP,EAAMO,KAAMC,MAAQR,EAAMO,KAAME,MAAOT,EAAMS,MAAOC,SAAUV,EAAMU,SAAUC,UAAQ,KACrHN,EAAAA,EAAAA,KAAA,QAAMH,UAAU,aAAYE,SAAEJ,EAAMY,WAGhD,C,yHCZe,SAASC,IAEpB,MAAOC,EAAQC,IAAYC,EAAAA,EAAAA,UAAS,KAC7BC,EAAWC,IAAeF,EAAAA,EAAAA,UAAS,KACnCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,IAC3CK,GAAaC,EAAAA,EAAAA,MAgBnB,OACIjB,EAAAA,EAAAA,KAAA,OAAKkB,MAAM,mBAAkBnB,UACzBH,EAAAA,EAAAA,MAAA,OAAKsB,MAAM,8BAA6BnB,SAAA,EACpCC,EAAAA,EAAAA,KAACmB,EAAAA,EAAW,CAAChB,MAAM,qBACnBH,EAAAA,EAAAA,KAACN,EAAAA,EAAS,CAACQ,KAAK,QAAQE,MAAOK,EAAOF,OAAO,QAAQF,SAAWe,GAAMV,EAASU,EAAEC,OAAOjB,UACxFJ,EAAAA,EAAAA,KAACN,EAAAA,EAAS,CAACQ,KAAK,WAAWE,MAAOQ,EAAUL,OAAO,WAAWF,SAAWe,GAAMP,EAAYO,EAAEC,OAAOjB,UACpGJ,EAAAA,EAAAA,KAACN,EAAAA,EAAS,CAACQ,KAAK,WAAWE,MAAOU,EAAcP,OAAO,mBAAmBF,SAAWe,GAAML,EAAgBK,EAAEC,OAAOjB,UACpHJ,EAAAA,EAAAA,KAAA,SAAOkB,MAAM,gBAAgBI,QArBpBC,UACjBH,EAAEI,iBACF,UACUC,EAAAA,EAAAA,IAA+BC,EAAAA,EAAMjB,EAAQG,GACnDe,MAAM,2BACNC,EAAAA,EAAAA,kBAAgB,IAAMZ,EAAW,MACrC,CACA,MAAMa,GACFF,MAAME,EAAMC,SACZC,QAAQC,IAAIH,EAChB,GAW4D3B,KAAK,SAASE,MAAM,gBAIxF,C,8CC/Be,SAASe,EAAYxB,GAEhC,OACIK,EAAAA,EAAAA,KAAA,MAAIH,UAAU,eAAeoC,GAAItC,EAAMuC,UAAUnC,SAAEJ,EAAMQ,OAEjE,C","sources":["components/base-components/FormField/FormField.js","components/RegisterForm/RegisterForm.js","components/base-components/ScreenTitle/ScreenTitle.js"],"sourcesContent":["import \"./FormField.css\";\r\n\r\n\r\n/**\r\n * FormField: A base component for a form field, which includes a label and a corresponding input field.\r\n * The label is displayed as a tooltip when the input field is focused or has input.\r\n * The input field is required.\r\n * @param {Object} props - The properties for the FormField component.\r\n * @param {String} props.type - The type of the input field, e.g. \"text\", \"password\", etc.\r\n * @param {String} props.value - The value of the input field.\r\n * @param {Function} props.onChange - The callback function when the input field's value changes.\r\n * @param {String} props.prompt - The label for the input field.\r\n * @param {String} props.styleClass - Any additional CSS classes to be added to the component's root element.\r\n */\r\n\r\nexport default function FormField(props){\r\n\r\n    return(\r\n        <div className={`form-field ${props.styleClass}`} >\r\n            <input name={props.type} type={props.type} title= {props.type} value={props.value} onChange={props.onChange} required/>\r\n            <span className=\"popup_text\">{props.prompt}</span>\r\n        </div>\r\n    );\r\n}","import { useNavigate } from 'react-router-dom';\r\nimport { useState, startTransition } from \"react\";\r\nimport {auth} from \"../FireBase\";\r\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\n\r\nimport ScreenTitle from \"../base-components/ScreenTitle/ScreenTitle\";\r\nimport FormField from \"../base-components/FormField/FormField\";\r\nimport \"./RegisterForm.css\";\r\nimport \"../utils.css\";\r\n\r\nexport default function RegisterForm() {\r\n       \r\n    const [email , setEmail] = useState(\"\");\r\n    const [password , setPassword] = useState(\"\");\r\n    const [passwordAuth, setPasswordAuth] = useState(\"\");\r\n    const navigation = useNavigate();\r\n    \r\n    const handleSignUp = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await createUserWithEmailAndPassword(auth, email , password);\r\n            alert(\"Signed Up Successfully\");\r\n            startTransition(() => navigation(\"/\"));\r\n        }\r\n        catch(error) {\r\n            alert(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div class=\"center-container\">\r\n            <div class=\"sign-up auth-form-container\">\r\n                <ScreenTitle title=\"Join our ranks!\"/>\r\n                <FormField type=\"email\" value={email} prompt=\"Email\" onChange={(e) => setEmail(e.target.value)}/>\r\n                <FormField type=\"password\" value={password} prompt=\"Password\" onChange={(e) => setPassword(e.target.value)}/>\r\n                <FormField type=\"password\" value={passwordAuth} prompt=\"Confirm Password\" onChange={(e) => setPasswordAuth(e.target.value)}/>\r\n                <input class=\"submit-button\" onClick={handleSignUp} type=\"submit\" value=\"Sign up\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import \"./ScreenTitle.css\"\r\n\r\n/**\r\n * A functional component that displays a screen title.\r\n * \r\n * @param {object} props - The props object.\r\n * @param {string} props.title - The text to display as the screen title.\r\n * @param {string} props.design_id - The id to assign to the title element.\r\n * \r\n * @returns A JSX element representing the screen title.\r\n */\r\n\r\nexport default function ScreenTitle(props){\r\n    \r\n    return(\r\n        <h2 className=\"screen-title\" id={props.design_id}>{props.title}</h2>\r\n    )\r\n}"],"names":["FormField","props","_jsxs","className","styleClass","children","_jsx","name","type","title","value","onChange","required","prompt","RegisterForm","email","setEmail","useState","password","setPassword","passwordAuth","setPasswordAuth","navigation","useNavigate","class","ScreenTitle","e","target","onClick","async","preventDefault","createUserWithEmailAndPassword","auth","alert","startTransition","error","message","console","log","id","design_id"],"sourceRoot":""}